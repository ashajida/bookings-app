// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Owner {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  services   Service[]  // One-to-many relationship with services
  availabilities Availability[] // One-to-many relationship with availabilities
}

model Customer {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  bookings   Booking[]  // One-to-many relationship with bookings
}

model Service {
  id          Int          @id @default(autoincrement())
  serviceName String
  description String?
  price       Decimal
  ownerId     Int
  owner       Owner        @relation(fields: [ownerId], references: [id]) // Many-to-one relationship with Owner
  availabilityServices AvailabilityService[] // Many-to-many relationship through pivot table
}

model Availability {
  id          Int          @id @default(autoincrement())
  dateAvailable DateTime
  timeSlot    DateTime
  ownerId     Int
  owner       Owner        @relation(fields: [ownerId], references: [id]) // Many-to-one relationship with Owner
  availabilityServices AvailabilityService[] // Many-to-many relationship through pivot table
  bookings    Booking[]  // One-to-many relationship with bookings
}

// Many-to-many relationship between Availability and Service through pivot table
model AvailabilityService {
  id             Int         @id @default(autoincrement())
  availabilityId Int
  serviceId      Int
  availability   Availability @relation(fields: [availabilityId], references: [id])
  service        Service      @relation(fields: [serviceId], references: [id])

  @@unique([availabilityId, serviceId]) // Ensures that the same service can't be assigned twice to the same availability
}

model Booking {
  id             Int       @id @default(autoincrement())
  customerId     Int
  availabilityId Int
  serviceId      Int
  bookingDate    DateTime   @default(now())

  customer       Customer   @relation(fields: [customerId], references: [id]) // Many-to-one relationship with Customer
  availability   Availability @relation(fields: [availabilityId], references: [id]) // Many-to-one relationship with Availability
  service        Service    @relation(fields: [serviceId], references: [id]) // Many-to-one relationship with Service
}
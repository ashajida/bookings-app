// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
  id         String @id
  sessions Session[]
  name       String
  phone      String     @unique
  email      String     @unique
  password   String
  services   Service[]  // One-to-many relationship with services
  operationTime OperationTime?
  blockedDates BlockedDate[]
  categories Category[]
  customers Customer[]
}

model Service {
  id          Int          @id @default(autoincrement())
  serviceName String
  description String?
  price       Decimal
  duration    String
  userId      String
  user       User        @relation(fields: [userId], references: [id]) // Many-to-one relationship with user
  bookings Booking[]
  categoryId Int?
  category Category?  @relation(fields: [categoryId], references: [id])
}

model Category {
  id Int @id @default(autoincrement())
  categoryName String
  services Service[]
  userId String
  user User?  @relation(fields: [userId], references: [id])
}



model OperationTime {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  sunday    String?
  monday    String?
  tuesday   String?
  wednesday String?
  thursday  String? 
  friday    String?
  saturday  String?
}
model BlockedDate {
  id          Int          @id @default(autoincrement())
  date DateTime
  user User @relation(fields: [userId], references: [id])
  userId String 
}


model Booking {
  id             Int       @id @default(autoincrement())
  serviceId      Int
  date       DateTime   @default(now())
  service        Service    @relation(fields: [serviceId], references: [id]) // Many-to-one relationship with Service
  status         String?
  customerBookings CustomerBooking []
}

model Customer {
  id             Int       @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  phone Int @unique
  userId String
  user User @relation(fields: [userId], references: [id])
  customerBookings CustomerBooking []
}

model CustomerBooking {
  id             Int       @id @default(autoincrement())
  customerId Int
  bookingId Int
  customer Customer @relation(fields: [customerId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])
}